// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Configuration
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Section {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    name     String
    link     String
    products Product[]
    shop     Shop      @relation(fields: [shopId], references: [id])
    shopId   String    @db.ObjectId

    @@map("secctions")
}

model Shop {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    name     String    @default("Advance Kpparels")
    logo     String?
    favicon  String?
    banner   String[]
    sections Section[]

    @@map("shop")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String  @db.ObjectId

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String   @db.ObjectId

    @@map("sessions")
}

enum Role {
    ADMIN
    USER
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    avatar         String?
    firstName      String?
    lastName       String?
    username       String?   @unique
    mobile         String?   @unique
    mobileVerified DateTime?
    email          String?   @unique
    emailVerified  DateTime?
    role           Role      @default(USER)
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    accounts       Account[]
    sessions       Session[]
    adresses       Address[]
    ratingsGiven   Rating[]
    reviewsGiven   Review[]

    @@map("users")
}

enum AddressType {
    HOME
    WORK
}

model Address {
    id                String      @id @default(auto()) @map("_id") @db.ObjectId
    name              String
    mobileNo          String
    pincode           String
    locality          String
    address           String
    street            String
    city              String
    state             String
    landmark          String?
    alternateMobileNo String?
    type              AddressType
    createdAt         DateTime    @default(now())
    updatedAt         DateTime    @updatedAt
    user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String      @db.ObjectId

    @@map("addresses")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification-tokens")
}

model Product {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    medias         String[]
    name           String
    description    String?
    quantity       Int?
    price          Float
    specialPrice   Float?
    discount       Int?
    specification  Json?
    rating         Float?
    totalRatings   Int?
    totalReviews   Int?
    published      Boolean   @default(false)
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    category       Category? @relation(fields: [categoryId], references: [id])
    categoryId     String?   @db.ObjectId
    ratingsRecived Rating[]
    reviewsRecived Review[]
    section        Section?  @relation(fields: [sectionId], references: [id])
    sectionId      String?   @db.ObjectId

    @@map("products")
}

model Category {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    createdAt DateTime   @default(now())
    updatedAt DateTime?  @updatedAt
    products  Product[]
    parentId  String?    @db.ObjectId
    parent    Category?  @relation("CategoryRelation", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    children  Category[] @relation("CategoryRelation")

    @@map("categories")
}

model Rating {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    rating    Int
    review    Review?
    product   Product @relation(fields: [productId], references: [id])
    productId String  @db.ObjectId
    user      User?   @relation(fields: [userId], references: [id])
    userId    String? @db.ObjectId

    @@map("ratings")
}

model Review {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    review    String
    product   Product @relation(fields: [productId], references: [id])
    productId String  @db.ObjectId
    user      User?   @relation(fields: [userId], references: [id])
    userId    String? @db.ObjectId
    rating    Rating  @relation(fields: [ratingId], references: [id])
    ratingId  String  @unique @db.ObjectId

    @@map("reviews")
}
